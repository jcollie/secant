#!/usr/bin/python
# -*- mode: python -*-

import socket
import struct
import threading
import sys
import time

import tacacs

import config

class SessionHandler:
    def __init__(self, session_id):
        self.session_id = session_id
        self.last_seq = 0

    def process_request(self, request):
        pass

class AuthenticationSessionHandler(SessionHandler):
    def __init__(self, session_id):
        SessionHandler.__init__(self, session_id)
        self.reset()
        
    def reset(self):
        self.start = True
        self.username = ''
        self.password = ''
        self.action = -1
        self.priv_lvl = -1
        self.authen_type = -1
        self.service = -1
        self.port = None
        self.rem_addr = None
        self.data = None
    
    def process_request(self, request):
        if self.start:
            request = tacacs.AuthenticationStart(copy_of=request)
            print 'Authentication Start'
            print `request.action`
            print `request.priv_lvl`
            print `request.authen_type`
            print `request.service`
            print `request.user`
            print `request.port`
            print `request.rem_addr`
            print `request.data`
            
            self.action = request.action
            self.priv_lvl = request.priv_lvl
            self.authen_type = request.authen_type
            self.service = request.service
            self.username = request.user
            self.port = request.port
            self.rem_addr = request.rem_addr
            self.data = request.data

            #if self.action != tacacs.TAC_PLUS_AUTHEN_LOGIN:
            #    reply = request.get_reply()
            #    reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_ERROR
            #    reply.user_msg = 'Only LOGIN is supported.'
            #    reply.data = ''
            #    return reply
                
            self.start = False
        
        else:
            request = tacacs.AuthenticationContinue(copy_of=request)

            print 'Authentication Continue'
            print `request.authentication_flags`
            print `request.user_msg`
            print `request.data`
            
            if request.authentication_flags & tacacs.TAC_PLUS_CONTINUE_FLAG_ABORT:
                self.reset()
                return None

            if self.username == '':
                self.username = request.user_msg

            elif self.password == '':
                self.password = request.user_msg

            else:
                reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_ERROR
                reply.authentication_flags = 0
                reply.server_msg = 'Already have username and password!'
                reply.data = ''
                
        reply = request.get_reply()

        if self.username == '':
            reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_GETUSER
            reply.authentication_flags = 0
            reply.server_msg = 'Username: '
            reply.data = ''
            
        elif self.password == '':
            reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_GETPASS
            reply.authentication_flags = tacacs.TAC_PLUS_REPLY_FLAG_NOECHO
            reply.server_msg = 'Password: '
            reply.data = ''
            
        else:
            # right now we just check username/password against a
            # single username/password specified in the config
            if self.username == config.username and self.password == config.password:
                reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_PASS
                reply.authentication_flags = 0
                reply.server_msg = 'Welcome!'
                reply.data = ''

            else:
                reply.authentication_status = tacacs.TAC_PLUS_AUTHEN_STATUS_FAIL
                reply.authentication_flags = 0
                reply.server_msg = 'Go Away!'
                reply.data = ''

        return reply

class AuthorizationSessionHandler(SessionHandler):
    def __init__(self, session_id):
        SessionHandler.__init__(self, session_id)
    
    def process_request(self, request):
        request = tacacs.AuthorizationRequest(copy_of=request)
        print 'Authorization'
        print `request.authen_method`
        print `request.priv_lvl`
        print `request.authen_type`
        print `request.authen_service`
        print `request.user`
        print `request.port`
        print `request.rem_addr`
        print `request.args`
        
        reply = request.get_reply()
        reply.authorization_status = tacacs.TAC_PLUS_AUTHOR_STATUS_PASS_ADD

        service = None
        cmd = None
        cmd_arg = []
        
        for arg in request.args:
            if arg.key == 'service':
                service = arg.value
            if arg.key == 'cmd':
                cmd = arg.value
            if arg.key == 'cmd-arg':
                cmd_arg.append(arg.value)

        if service == 'shell' and cmd == '':
            reply.server_msg = 'Shell request granted!'
            reply.args.append(tacacs.Argument('priv-lvl=15'))
        else:
            reply.server_msg = 'Other request granted!'
            
        return reply
    
class AccountingSessionHandler(SessionHandler):
    def __init__(self, session_id):
        SessionHandler.__init__(self, session_id)
    
    def process_request(self, request):
        request = tacacs.AccountingRequest(copy_of=request)
        print 'Accounting'
        print `request.accounting_flags`
        print `request.authen_method`
        print `request.priv_lvl`
        print `request.authen_type`
        print `request.authen_service`
        print `request.user`
        print `request.port`
        print `request.rem_addr`
        print `request.args`
        
        reply = request.get_reply()
        reply.accounting_status = tacacs.TAC_PLUS_ACCT_STATUS_SUCCESS

        return reply
    
class TCPSessionMultiplexer(threading.Thread):
    def __init__(self, connection):
        threading.Thread.__init__(self)
        self.connection = connection
        self.peername = connection.getpeername()
        self.handlers = {}
        
    def run(self):
        while 1:
            request_header = self.connection.recv(12)
            if len(request_header) != 12:
                return

            request = tacacs.Packet(config.tacacs_key)
            request.set_header(request_header)

            request_body = self.connection.recv(request.length)

            if len(request_body) != request.length:
                return
            
            request.set_body(request_body)

            if self.handlers.has_key(request.session_id):
                handler = self.handlers[request.session_id]

            else:
                if request.packet_type == tacacs.TAC_PLUS_AUTHEN:
                    sys.stderr.write('New authentication session.\n')
                    handler = AuthenticationSessionHandler(request.session_id)

                elif request.packet_type == tacacs.TAC_PLUS_AUTHOR:
                    sys.stderr.write('New authorization session.\n')
                    handler = AuthorizationSessionHandler(request.session_id)

                elif request.packet_type == tacacs.TAC_PLUS_ACCT:
                    sys.stderr.write('New accounting session.\n')
                    handler = AccountingSessionHandler(request.session_id)

                self.handlers[request.session_id] = handler

            reply = handler.process_request(request)
            if reply != None:
                if request.header_flags & tacacs.TAC_PLUS_SINGLE_CONNECT_FLAG:
                    reply.header_flags |= tacacs.TAC_PLUS_SINGLE_CONNECT_FLAG
                self.connection.send(reply.pack())
        
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', 49))
s.listen(5)

last_check = time.time()
multiplexers = []
           
while 1:
    connection, address = s.accept()
    sys.stderr.write('New connection from %s\n' % `address`)
    multiplexer = TCPSessionMultiplexer(connection)
    multiplexer.start()
    if time.time() - last_check > 5.0:
        multiplexers = [multiplexer for multiplexer in multiplexers if multiplexer.isAlive()]
        last_check = time.time()
    multiplexers.append(multiplexer)
